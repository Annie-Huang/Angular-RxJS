https://app.pluralsight.com/library/courses/rxjs-angular-reactive-development/table-of-contents
https://github.com/DeborahK/Angular-RxJS
https://github.com/Annie-Huang/Angular-RxJS

https://stackblitz.com/
https://rxjs.dev/api
https://rxjs.dev/operator-decision-tree
https://rxjs-dev.firebaseapp.com/api/index/function/empty
https://www.learnrxjs.io/learn-rxjs/operators/creation/empty
https://rxjs-dev.firebaseapp.com/api/index/function/combineLatest
https://www.learnrxjs.io/learn-rxjs/operators/combination/combinelatest
https://rxjs-dev.firebaseapp.com/api/index/function/forkJoin
https://www.learnrxjs.io/learn-rxjs/operators/combination/forkjoin
https://rxjs-dev.firebaseapp.com/api/operators/withLatestFrom
https://www.learnrxjs.io/learn-rxjs/operators/combination/withlatestfrom
https://rxjs-dev.firebaseapp.com/api/operators/filter
https://www.learnrxjs.io/learn-rxjs/operators/filtering/filter
https://rxjs-dev.firebaseapp.com/api/operators/shareReplay
https://www.learnrxjs.io/learn-rxjs/operators/multicasting/sharereplay
https://rxjs-dev.firebaseapp.com/api/operators/concatMap
https://www.learnrxjs.io/learn-rxjs/operators/transformation/concatmap
https://rxjs-dev.firebaseapp.com/api/operators/mergeMap
https://www.learnrxjs.io/learn-rxjs/operators/transformation/mergemap
https://rxjs-dev.firebaseapp.com/api/operators/switchMap
https://www.learnrxjs.io/learn-rxjs/operators/transformation/switchmap


In C:\react\Angular-RxJS\CodeBackupToLecture3RxJSOperator\
the only change that is different from angular cli generated project is:
C:\react\Angular-RxJS\src\app\app.component.ts


Things I haven't done:
In the last chapter, it suggest people use to vm$ to combined all the obversable before returning it to the html page.
The sample that has been done is product-details. I haven' done any further.
But it's said it's done within the APM-Final folder....


Keywords used:
-----------
subscribe         RxJS Terms and Syntax
next()
error()
complete()
unsubscribe
of
from
-----------
map               RxJS Operators
tap
take
-----------
catchError        Going Reactive
EMPTY
throwError
-----------
map               Mapping Returned Data
-----------
combineLatest     Combining Steams
forkJoin
withLatestFrom
-----------
filter            Reacting to Actions
startWith
Subject
BehaviorSubject
-----------
merge             Reacting to Actions Examples
scan
-----------
shareReplay       Caching Observables
-----------
concatMap         Higher-order Mapping Operators
mergeMap (flatMap)
switchMap
-----------
(none)            Combining All the Streams


======================================================


RxJS: Reactive Extensions for JavaScript


C:\react>ng new Angular-RxJS
? Would you like to add Angular routing? (y/N) y
? Which stylesheet format would you like to use?
> CSS
  SCSS   [ https://sass-lang.com/documentation/syntax#scss                ]
  Sass   [ https://sass-lang.com/documentation/syntax#the-indented-syntax ]
  Less   [ http://lesscss.org                                             ]
  Stylus [ http://stylus-lang.com                                         ]


C:\react\Angular-RxJS>npm install bootstrap
C:\react\Angular-RxJS>npm install core-js
C:\react\Angular-RxJS>npm install angular-in-memory-web-api --save-dev

empty:
Observable that immediately completes.

combineLatest:
When any observable emits a value, emit the last emitted value from each.
It only start emitting when all stream stared of values. e.g. stream 1 emit at 1s, stream 2 emit at 4s, stream 3 emits at 9s.
Then the first value to emit is at 9s.

forkJoin
When all observables complete, emit the last emitted value from each.

withLatestFrom
Combines the source Observable with other Observables to create an Observable whose values are calculated from the latest values of each, only when the source emits.
Like combineLatest, it will only emit value when both 's' and 'c' has emitted value (Module06 Combining Streams - Note41 - Marble Diagram - withLatestFrom.jpg).
And from then on, every time 'a' emit a value, it will find the latest of 's' and 'c' value.


combineLatest is more popular
Because combineLatest can use with http and action, or http and http
Where as forkJoin usually only use in http and http.


Use suxfix Subject to represent Subject:          categorySelectedSubject
Use suxfix Action$ to represent Action Stream:    categorySelectedAction$

-----------------
shareReplay(1)
1 is the optional buffer size, which is the number of items cached and replayed. which means it will always send the last assigned value.
Will it ever be another value rather than 1??

In product-list.component.ts
  products$ = combineLatest([
    1. this.productService.productWithAdd$,  -->     1.1 this.productWithCategory$, -->     1.1.1. this.products$,
                                                                                            1.1.2. this.productCategoryService.productCategories$  ***
                                                     1.2 this.productInsertAction$
    2. this.categorySelectedAction$
  ])
  categories$ = this.productCategoryService.productCategories$  ***

Therefore we can add shareReplay(1) into productCategories$

After you add shareReplay(1) for productWithCategory$ and selectedProduct$ for product.service.ts
Load Product List page, then go to Home page and go back to Product List page. You can see how fast the Product list page load
as it doesn't required to reload category and products.

Cache Invalidation:
Evaluate:
  - Fluidity of data  >> How often does data change
  - User's behavior   >> Does user log out when they finish the task? Or they will have it login all day long?
Consider:
  - Invalidating the cache on a time interval
  - Allowing the user to control when data is refreshed     >> Meaning when the data is invalidating and refresh after a time interval, if user is doing something at the time, ask user's permission first.
  - Always getting fresh data on update operations.
-----------------


Any Observable emit Observable is called Higher-order Observable


concatMap:
Projects each source value to an Observable which is merged in the output Observable, in a serialized fashion waiting for each one to complete before merging the next.
It waits for each inner Observable to complete before processing the next one.
Concatenates their results in sequence.


mergeMap:
Projects each source value to an Observable which is merged in the output Observable.
It executes inner Observables in parallel.
E.g. in our marble diagram: A1 can be return after A2.

flatMap is an alias for mergeMap!
If only one inner subscription should be active at a time, try switchMap!
If the order of emission and subscription of inner observables is important, try concatMap!

switchMap:
Projects each source value to an Observable which is merged in the output Observable, emitting values only from the most recently projected Observable.
Stops the prior inner Observable and switches to the new inner Observable






