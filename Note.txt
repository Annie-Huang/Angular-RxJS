Why Should You Care About RxJS Higher-order Mapping Operators? | Deborah Kurata | ng-conf: Hardwired (https://www.youtube.com/watch?v=ldRdjc-60PM&t=771s)
https://app.pluralsight.com/library/courses/rxjs-angular-reactive-development/table-of-contents
https://github.com/DeborahK/Angular-RxJS
https://github.com/Annie-Huang/Angular-RxJS

https://stackblitz.com/
https://rxjs.dev/api
https://rxjs.dev/operator-decision-tree
https://rxjs-dev.firebaseapp.com/api/index/function/empty
https://www.learnrxjs.io/learn-rxjs/operators/creation/empty
https://rxjs-dev.firebaseapp.com/api/index/function/combineLatest
https://www.learnrxjs.io/learn-rxjs/operators/combination/combinelatest
https://rxjs-dev.firebaseapp.com/api/index/function/forkJoin
https://www.learnrxjs.io/learn-rxjs/operators/combination/forkjoin
https://rxjs-dev.firebaseapp.com/api/operators/withLatestFrom
https://www.learnrxjs.io/learn-rxjs/operators/combination/withlatestfrom
https://rxjs-dev.firebaseapp.com/api/operators/filter
https://www.learnrxjs.io/learn-rxjs/operators/filtering/filter
https://rxjs-dev.firebaseapp.com/api/operators/shareReplay
https://www.learnrxjs.io/learn-rxjs/operators/multicasting/sharereplay
https://rxjs-dev.firebaseapp.com/api/operators/concatMap
https://www.learnrxjs.io/learn-rxjs/operators/transformation/concatmap
https://rxjs-dev.firebaseapp.com/api/operators/mergeMap
https://www.learnrxjs.io/learn-rxjs/operators/transformation/mergemap
https://rxjs-dev.firebaseapp.com/api/operators/switchMap
https://www.learnrxjs.io/learn-rxjs/operators/transformation/switchmap


In C:\react\Angular-RxJS\CodeBackupToLecture3RxJSOperator\
the only change that is different from angular cli generated project is:
C:\react\Angular-RxJS\src\app\app.component.ts


Things I haven't done:
In the last chapter, it suggest people use to vm$ to combined all the obversable before returning it to the html page.
The sample that has been done is product-details. I haven' done any further.
But it's said it's done within the APM-Final folder....


Keywords used:
-----------
subscribe         RxJS Terms and Syntax
next()
error()
complete()
unsubscribe
of
from
-----------
map               RxJS Operators
tap
take
-----------
catchError        Going Reactive
EMPTY
throwError
-----------
map               Mapping Returned Data
-----------
combineLatest     Combining Steams
forkJoin
withLatestFrom
-----------
filter            Reacting to Actions
startWith
Subject
BehaviorSubject
-----------
merge             Reacting to Actions Examples
scan
-----------
shareReplay       Caching Observables
-----------
concatMap         Higher-order Mapping Operators
mergeMap (flatMap)
switchMap
-----------
(none)            Combining All the Streams


======================================================


RxJS: Reactive Extensions for JavaScript


C:\react>ng new Angular-RxJS
? Would you like to add Angular routing? (y/N) y
? Which stylesheet format would you like to use?
> CSS
  SCSS   [ https://sass-lang.com/documentation/syntax#scss                ]
  Sass   [ https://sass-lang.com/documentation/syntax#the-indented-syntax ]
  Less   [ http://lesscss.org                                             ]
  Stylus [ http://stylus-lang.com                                         ]


C:\react\Angular-RxJS>npm install bootstrap
C:\react\Angular-RxJS>npm install core-js
C:\react\Angular-RxJS>npm install angular-in-memory-web-api --save-dev

empty:
Observable that immediately completes.

combineLatest:
When any observable emits a value, emit the last emitted value from each.
It only start emitting when all stream stared of values. e.g. stream 1 emit at 1s, stream 2 emit at 4s, stream 3 emits at 9s.
Then the first value to emit is at 9s.

forkJoin
When all observables complete, emit the last emitted value from each.

withLatestFrom
Combines the source Observable with other Observables to create an Observable whose values are calculated from the latest values of each, only when the source emits.
Like combineLatest, it will only emit value when both 's' and 'c' has emitted value (Module06 Combining Streams - Note41 - Marble Diagram - withLatestFrom.jpg).
And from then on, every time 'a' emit a value, it will find the latest of 's' and 'c' value.


combineLatest is more popular
Because combineLatest can use with http and action, or http and http
Where as forkJoin usually only use in http and http.


Use suxfix Subject to represent Subject:          categorySelectedSubject
Use suxfix Action$ to represent Action Stream:    categorySelectedAction$

-----------------
shareReplay(1)
1 is the optional buffer size, which is the number of items cached and replayed. which means it will always send the last assigned value.
Will it ever be another value rather than 1??

In product-list.component.ts
  products$ = combineLatest([
    1. this.productService.productWithAdd$,  -->     1.1 this.productWithCategory$, -->     1.1.1. this.products$,
                                                                                            1.1.2. this.productCategoryService.productCategories$  ***
                                                     1.2 this.productInsertAction$
    2. this.categorySelectedAction$
  ])
  categories$ = this.productCategoryService.productCategories$  ***

Therefore we can add shareReplay(1) into productCategories$

After you add shareReplay(1) for productWithCategory$ and selectedProduct$ for product.service.ts
Load Product List page, then go to Home page and go back to Product List page. You can see how fast the Product list page load
as it doesn't required to reload category and products.

Cache Invalidation:
Evaluate:
  - Fluidity of data  >> How often does data change
  - User's behavior   >> Does user log out when they finish the task? Or they will have it login all day long?
Consider:
  - Invalidating the cache on a time interval
  - Allowing the user to control when data is refreshed     >> Meaning when the data is invalidating and refresh after a time interval, if user is doing something at the time, ask user's permission first.
  - Always getting fresh data on update operations.
-----------------


Any Observable emit Observable is called Higher-order Observable



################
## concatMap: ##
################
Projects each source value to an Observable which is merged in the output Observable, in a serialized fashion waiting for each one to complete before merging the next.
It waits for each inner Observable to complete before processing the next one.
Concatenates their results in sequence.

Use concatMap when:
- To wait for the prior Observable to complete before starting the next one.
- To process items in sequence
- Example:
    - Form a set of ids, get data in sequence
    - From a set of ids, update data in sequence


concatmap starts just the same as mergemap did on the sbuscribe to the source stream it takes then the observable stream subscribess to that stream and creates an output stream.
But concatmap unlike merge map when an item is emitted from the stream it philosophically queues it so the emitted item is queued up.
Then when the item is processed off the queue at that point the item is mapped to the inner observable.
It subscribes to that inner observable and another thing different about concatmap and merge map is that it waits so this code (inner) is going to just stop and wait
till that response is returned then it's going to concatenate it to the output stream and unsubscribe.
Only then does it take the next one off the queue so it's going to be processing them one at a time which is really good if you want to ensure that these
are going to happen in sequence. So you want to use concatmap anytime you want to wait for one to finish before starting the next one, (i meant) the next inner observable.
It will process those items in sequence so an couple of example on this one from a set of ID's get data in sequences or from a set of ID's update data you really
consider using concatmap if you're doing any kids of updates, inserts or deletes because you may want them actually in order, say a user updates a product
and then updates the same product at a second time, you want to ensure that they are both processed in the order that the user made the updates
and concatmap will help you ensure that happens

  product$ = this.productSelectedAction$
    .pipe(
      concatMap(selectedId =>
        this.http.get<Product>(`${url}/${selectedId}`)
          .pipe(
            tap(response => console.log(response))
          )
    );


###############
## mergeMap: ##
###############
Projects each source value to an Observable which is merged in the output Observable.
It executes inner Observables in parallel.
E.g. in our marble diagram: A1 can be return after A2.

flatMap is an alias for mergeMap!
If only one inner subscription should be active at a time, try switchMap!
If the order of emission and subscription of inner observables is important, try concatMap!

Use mergeMap when:
- To process items in parallet
- When order doesn't matter
- Examples: With a set of suppiler ids, get each supplier for a product (order doesn't matter)

Use mergemap any time we want to process items in parallel, because what happens with merge map is this the user picks one and then takes a different one
then picks a different one (pick product from a list of products), it's goign to execute those requests right away and process those items in parallel.
Now because it's processing them in parallel and because it's all async you can't depend on the order of the returned results.
Some examples of when to use mergemaps say you have a set of IDs and you want to get all of the suppliers for a product when order doesn't matter,
it can send off the request for all of them all at the same time and get all of their values back.

  product$ = this.productSelectedAction$
    .pipe(
      mergeMap(selectedId =>
        this.http.get<Product>(`${url}/${selectedId}`)
          .pipe(
            tap(response => console.log(response))
          )
    );


################
## switchMap: ##
################
Projects each source value to an Observable which is merged in the output Observable, emitting values only from the most recently projected Observable.
Stops the prior inner Observable and switches to the new inner Observable

Use switchMap when:
- To stop any prior Observable before switching to the next one.
- To process the most recent item
- Example
  - Type ahead or auto completion
  - User selection from a list


Like other higher-order mapping operators it starts the same. Unbscribe to the source string so when we subscribe to product$ it subscribes to the
product selected action. It takes in that obvervable stream that product selected action stream, subscribes to it and creates an output stream.
So that process is the same for all of these operator. When an item is emitted from the source stream with switchmap, the item is mapped to an
inner observable. But then what's different from switch map and the other two is that it unsubscribed from any prior inner observable.
It then subscribes to the new entered observable it concatenates its emission and unsubscribe. So if the user picked 5 what's going to do is
start to get 4 then it's going to see that 5 was emitted, it's going to throw away the 4 and the subscription for that, and go ahead and
process that last selection that user made on with the ID of 5. So when would we use switch map to stop any prior observable before switching
to the next one, to process basically the most recent item. For example type-ahead. So if the user types two letters you might go off and
start searching for something as soon as they type the third you really don't care about the results from the first two characters now
you want the results for the three. Another example is user selection from a list because if they can pick multiple ones and you only want
ever their last selection to be process you want to use a switchmap


  product$ = this.productSelectedAction$
    .pipe(
      switchmap(selectedId =>
        this.http.get<Product>(`${url}/${selectedId}`)
          .pipe(
            tap(response => console.log(response))
          )
    );




